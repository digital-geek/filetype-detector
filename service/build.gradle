buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE")
        classpath("org.eclipse.jgit:org.eclipse.jgit:3.2.0.201312181205-r")
        classpath("com.netflix.nebula:gradle-info-plugin:2.2.+")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'nebula.info'
apply plugin: 'sonar-runner'
apply plugin: 'jacoco'

group = 'com.smartling'
description = 'Smartling File Type Detector'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    springBootVersion = '1.2.3.RELEASE'
}

dependencies {
    compile 'com.smartling:ml-text:0.1.0'
    runtime 'com.facebook.thirdparty:libsvm:3.18.1'
    runtime 'org.apache.commons:commons-math3:3.5'
    runtime 'com.ibm.icu:icu4j:55.1'

    compile 'commons-io:commons-io:2.4'
    compile 'org.ahocorasick:ahocorasick:0.2.4'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile "org.slf4j:slf4j-api:1.7.10"
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-actuator:${springBootVersion}"

    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"

    testCompile project(':client')
    testCompile 'com.natpryce:make-it-easy:4.0.0'
    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testCompile 'org.powermock:powermock-core:1.6.2'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.powermock:powermock-api-mockito:1.6.2'

    testRuntime "com.jayway.jsonpath:json-path:0.9.1"
    testRuntime "org.slf4j:jcl-over-slf4j:1.7.7"
    testRuntime "ch.qos.logback:logback-classic:1.1.3"
}

processResources {
    filesMatching('**/*.properties') { expand(project.properties) }
}


test {
    testLogging.showStandardStreams = true

    // set heap size for the systemtest JVM(s)
    minHeapSize = "1024m"
    maxHeapSize = "2048m"

    // Uncomment the following jvmArgs line if you want to use a debugger during tests. It will stop execution on failure, and let you connect.
    // NOTE: Make sure to put the comment back before you commit!!!
    //jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005'

    outputs.upToDateWhen { false }
    reports.junitXml.destination = file("$rootDir/tests-output")
}

jacocoTestReport {
    reports {
        html.destination "${buildDir}/reports/jacoco"
    }
}

sonarRunner {
    sonarProperties {
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", "$System.env.GRADLE_JDBC_USER"
        property "sonar.jdbc.password", "$System.env.GRADLE_JDBC_PASSWORD"
    }
}
